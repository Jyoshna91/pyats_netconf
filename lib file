from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class NetconfCommonFunctions:
    @staticmethod
    def configure_acl_on_device(device, acl_name, rule):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
               <nxos:cmd>conf t ; ip access-list {acl_name} ; {rule}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_device(device, acl_name):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
           <nxos:exec-command>
              <nxos:cmd>conf t ; no ip access-list {acl_name}</nxos:cmd>
           </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def configure_acl_on_interface(device, intf, acl_name, bound):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface {intf} ; ip access-group {acl_name} {bound}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_interface(device, intf, acl_name, bound):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface {intf} ; no ip access-group {acl_name} {bound}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)
    @staticmethod
    def verify_acl(device, acl_name):
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(verification_request)
    @staticmethod
    def show_running_config(device, intf):
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd> show running-config interface {intf}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(verification_request)

    @staticmethod
    def ping_device(device, destination_ip):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>ping {destination_ip}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def validate_ping(input):
        pattern = re.compile(r'(?P<sent_pkt>\d+) packets transmitted, (?P<receive_pkt>\d+) packets received, (?P<pkt_loss>\d+)% packet loss')
        out_dict = {}
        for line in input.split('\n'):
            p1 = pattern.match(line)
            if p1:
                out_dict.update(p1.groupdict())
        return out_dict
