from pyats.topology import loader
from pyats import aetest
import yaml
import re, logging
from lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Load data from config file
with open("config_data.yaml", "r") as file:
    config_data = yaml.safe_load(file)

acl_name = config_data['acl_name']
rule1 = config_data['rule1']
rule2 = config_data['rule2']
rule3 = config_data['rule3']
bound = config_data['bound']
bound1 = config_data['bound1']
device1_intf = config_data['device1']['intf']
device2_intf1 = config_data['device2']['intf1']
device2_intf2 = config_data['device2']['intf2']
device3_intf = config_data['device3']['intf']

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global devices
        devices = {
            'dut1': testbed.devices['n9k1'],
            'dut2': testbed.devices['n9k4'],
            'dut3': testbed.devices['n9k3']
        }
        for name, device in devices.items():
            device.connect(alias='nc', via='netconf')
            assert device.nc.connected, f"Device {name} connection failed"

class PermitACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut1 = devices['dut1']
        logger.info(f"Configure permit ACL on device1: {uut1.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule1)

        logger.info("Configure permit ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if permit ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure permit ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure permit ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class DenyACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut4 = devices['dut2']
        logger.info(f"Configure deny ACL on device2: {uut4.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut4, acl_name, rule2)

        logger.info("Configure deny ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut4 = devices['dut2']
        logger.info("Check if deny ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut4, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info("Unconfigure deny ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut4, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure deny ACL on device: {uut4.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut4, acl_name)

class ACLTestcaseMultipleRules(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info(f"Configure ACL on device1: {uut1.name} with rule3")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule3)

        logger.info(f"Configure ACL on device1: {uut1.name} with rule2")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule2)

        logger.info("Configure ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if ACL is configured with multiple rules")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, acl_name)
        acl_output = str(verification_reply)
        rule_pattern1 = r'<(mod:seqno)>[2-9][0-9]'
        rule_pattern2 = r'<(mod:seqno)>[1-9][0-9]'
        match1 = re.search(rule_pattern1, acl_output)
        match2 = re.search(rule_pattern2, acl_output)
        if match1 and match2:
            logging.info(f"The ACL rules are verified successfully on device {acl_name}.")
            logging.info(f"Matched Lines on {acl_name}: {match1.group(0)}, {match2.group(0)}")
        else:
            self.failed(f"ACL rules matching '{rule_pattern1}' and '{rule_pattern2}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class ACLTestcaseInOutBound(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info(f"Configure ACL on device4: {uut4.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut4, acl_name, rule1)

        logger.info("Configure inbound ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device2_intf1, acl_name, bound)

        logger.info("Configure outbound ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device2_intf2, acl_name, bound1)

    @aetest.test
    def verify_acl_configuration(self):
        uut4 = devices['dut2']
        logger.info("Check if ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut4, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:permitdeny)>[a-z]{6}'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info("Unconfigure inbound ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut4, device2_intf1, acl_name, bound)

        logger.info("unconfigure outbound ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut4, device2_intf2, acl_name, bound1)

        logger.info(f"Unconfigure ACL on device: {uut4.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut4, acl_name)

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        for name, device in devices.items():
            device.nc.disconnect()
            assert not device.nc.connected, f"Device {name} disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))






command execution:
----
<?xml version="1.0"?>
<nf:rpc xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns:nxos="http://www.cisco.com/nxos:1.0" message-id="110">
  <nxos:exec-command>
    <nxos:cmd>show access-list</nxos:cmd>
  </nxos:exec-command>
</nf:rpc>]]>]]>



lib file:
---------

from genie.testbed import load
from pyats.topology import loader
from pyats import aetest
import re, logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class NetconfCommonFunctions:
    @staticmethod
    def configure_acl_on_device(device):
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="107" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
               <nxos:cmd>conf t ; ip access-list aclnqt ; 10 permit ip 10.10.10.1/24 any ; 20 permit ip 192.168.10.1/24 any</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_device(device):
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="108" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
           <nxos:exec-command>
              <nxos:cmd>conf t ; no ip access-list aclnqt</nxos:cmd>
           </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def configure_acl_on_interface(device):
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="109" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface Ethernet1/5 ; no switchport ; ip address 10.10.10.1 255.255.255.0 ; ip access-group aclnqt in ; no shutdown</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def unconfigure_acl_on_interface(device):
        command_request = """
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="110" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>conf t ; interface Ethernet1/5 ; no ip access-group aclnqt in ; shutdown</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def ping_device(device, destination_ip):
        command_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>ping {destination_ip}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        return device.nc.request(command_request)

    @staticmethod
    def validate_ping(input):
        pattern = re.compile(r'(?P<sent_pkt>\d+) packets transmitted, (?P<receive_pkt>\d+) packets received, (?P<pkt_loss>\d+)% packet loss')
        out_dict = {}
        for line in input.split('\n'):
            p1 = pattern.match(line)
            if p1:
                out_dict.update(p1.groupdict())
        return out_dict
