class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global devices
        devices = {
            'dut1': testbed.devices['n9k1'],
            'dut2': testbed.devices['n9k4'],
            'dut3': testbed.devices['n9k3']
        }
        for name, device in devices.items():
            device.connect(alias='nc', via='netconf')
            assert device.nc.connected, f"Device {name} connection failed"

class PermitACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut1 = devices['dut1']
        logger.info(f"Configure permit ACL on device1: {uut1.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule1)

        logger.info("Configure permit ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if permit ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure permit ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure permit ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class DenyACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut4 = devices['dut2']
        logger.info(f"Configure deny ACL on device2: {uut4.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut4, acl_name, rule2)

        logger.info("Configure deny ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut4 = devices['dut2']
        logger.info("Check if deny ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut4, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info("Unconfigure deny ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut4, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure deny ACL on device: {uut4.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut4, acl_name)

class ACLTestcaseMultipleRules(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info(f"Configure ACL on device1: {uut1.name} with rule3")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule3)

        logger.info(f"Configure ACL on device1: {uut1.name} with rule2")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule2)

        logger.info("Configure ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if ACL is configured with multiple rules")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, acl_name)
        acl_output = str(verification_reply)
        rule_pattern1 = r'<(mod:seqno)>[2-9][0-9]'
        rule_pattern2 = r'<(mod:seqno)>[1-9][0-9]'
        match1 = re.search(rule_pattern1, acl_output)
        match2 = re.search(rule_pattern2, acl_output)
        if match1 and match2:
            logging.info(f"The ACL rules are verified successfully on device {acl_name}.")
            logging.info(f"Matched Lines on {acl_name}: {match1.group(0)}, {match2.group(0)}")
        else:
            self.failed(f"ACL rules matching '{rule_pattern1}' and '{rule_pattern2}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class ACLTestcaseInOutBound(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info(f"Configure ACL on device4: {uut4.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut4, acl_name, rule1)

        logger.info("Configure ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device2_intf1, acl_name, bound)

    @aetest.test
    def verify_acl_configuration(self):
        uut4 = devices['dut2']
        logger.info("Check if ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut4, acl_name)
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:permitdeny)>[a-z]{6}'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {acl_name}.")
            logging.info(f"Matched Line on {acl_name}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {acl_name} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut4 = devices['dut2']
        logger.info("Unconfigure ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut4, device2_intf1, acl_name, bound)

        logger.info("Configure outbound ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut4, device2_intf2, acl_name, bound1)

        logger.info(f"Unconfigure ACL on device: {uut4.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut4, acl_name)

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        for name, device in devices.items():
            device.nc.disconnect()
            assert not device.nc.connected, f"Device {name} disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))
