from pyats.topology import loader
from pyats import aetest
import yaml
import re, logging
from lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Load data from config file
with open("config_data.yaml", "r") as file:
    config_data = yaml.safe_load(file)

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global devices
        devices = {
            'dut1': testbed.devices['n9k1'],
            'dut2': testbed.devices['n9k4'],
            'dut3': testbed.devices['n9k3']
        }
        for name, device in devices.items():
            device.connect(alias='nc', via='netconf')
            assert device.nc.connected, f"Device {name} connection failed"

class PermitACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut1 = devices['dut1']
        logger.info(f"Configure permit ACL on device1: {uut1.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut1, config_data['acl_name'], config_data['rule1'])

        logger.info("Configure permit ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, config_data['device1']['intf'], config_data['acl_name'], config_data['bound'])

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if permit ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, config_data['acl_name'])
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {config_data['acl_name']}.")
            logging.info(f"Matched Line on {config_data['acl_name']}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {config_data['acl_name']} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure permit ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, config_data['device1']['intf'], config_data['acl_name'], config_data['bound'])

        logger.info(f"Unconfigure permit ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, config_data['acl_name'])

class DenyACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut2 = devices['dut2']
        logger.info(f"Configure deny ACL on device2: {uut2.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut2, config_data['acl_name'], config_data['rule2'])

        logger.info("Configure deny ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut2, config_data['device2']['intf1'], config_data['acl_name'], config_data['bound'])

    @aetest.test
    def verify_acl_configuration(self):
        uut2 = devices['dut2']
        logger.info("Check if deny ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut2, config_data['acl_name'])
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:seqno)>[1-9][0-9]'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {config_data['acl_name']}.")
            logging.info(f"Matched Line on {config_data['acl_name']}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {config_data['acl_name']} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut2 = devices['dut2']
        logger.info("Unconfigure deny ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut2, config_data['device2']['intf1'], config_data['acl_name'], config_data['bound'])

        logger.info(f"Unconfigure deny ACL on device: {uut2.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut2, config_data['acl_name'])

class ACLTestcaseMultipleRules(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info(f"Configure ACL on device1: {uut1.name} with rule3")
        NetconfCommonFunctions.configure_acl_on_device(uut1, config_data['acl_name'], config_data['rule3'])

        logger.info(f"Configure ACL on device1: {uut1.name} with rule2")
        NetconfCommonFunctions.configure_acl_on_device(uut1, config_data['acl_name'], config_data['rule2'])

        logger.info("Configure ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, config_data['device1']['intf'], config_data['acl_name'], config_data['bound'])

    @aetest.test
    def verify_acl_configuration(self):
        uut1 = devices['dut1']
        logger.info("Check if ACL is configured with multiple rules")
        verification_reply = NetconfCommonFunctions.verify_acl(uut1, config_data['acl_name'])
        acl_output = str(verification_reply)
        rule_pattern1 = r'<(mod:seqno)>[2-9][0-9]'
        rule_pattern2 = r'<(mod:seqno)>[1-9][0-9]'
        match1 = re.search(rule_pattern1, acl_output)
        match2 = re.search(rule_pattern2, acl_output)
        if match1 and match2:
            logging.info(f"The ACL rules are verified successfully on device {config_data['acl_name']}.")
            logging.info(f"Matched Lines on {config_data['acl_name']}: {match1.group(0)}, {match2.group(0)}")
        else:
            self.failed(f"ACL rules matching '{rule_pattern1}' and '{rule_pattern2}' not found in the device {config_data['acl_name']} configuration")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, config_data['device1']['intf'], config_data['acl_name'], config_data['bound'])

        logger.info(f"Unconfigure ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, config_data['acl_name'])

class ACLTestcaseInOutBound(aetest.Testcase):

    @aetest.setup
    def configure_acl_on_device(self):
        uut2 = devices['dut2']
        logger.info(f"Configure ACL on device2: {uut2.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut2, config_data['acl_name'], config_data['rule1'])

        logger.info("Configure inbound ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut2, config_data['device2']['intf1'], config_data['acl_name'], config_data['bound'])

        logger.info("Configure outbound ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut2, config_data['device2']['intf2'], config_data['acl_name'], config_data['bound1'])

    @aetest.test
    def verify_acl_configuration(self):
        uut2 = devices['dut2']
        logger.info("Check if ACL is configured")
        verification_reply = NetconfCommonFunctions.verify_acl(uut2, config_data['acl_name'])
        acl_output = str(verification_reply)
        rule_pattern = r'<(mod:permitdeny)>[a-z]{6}'
        match = re.search(rule_pattern, acl_output)
        if match:
            logging.info(f"The ACL rule is verified successfully on device {config_data['acl_name']}.")
            logging.info(f"Matched Line on {config_data['acl_name']}: {match.group(0)}")
        else:
            self.failed(f"ACL rule matching '{rule_pattern}' not found in the device {config_data['acl_name']} configuration")

        logger.info("Check if ACL is configured")
        inoutbound_verification_reply = NetconfCommonFunctions.show_running_config(uut2, config_data['device2']['intf1'])
        acl_output = str(inoutbound_verification_reply)
        inoutbound_acl_check = r'[a-z]+\s+[a-z]+-[a-z]+\s+\w+\s+[a-z]+'
        match = re.search(inoutbound_acl_check, acl_output)
        if match:
            logging.info(f"Inbound ACL {config_data['acl_name']} is applied correctly on interface {config_data['device2']['intf1']}.")
            logging.info(f"Matched Line on {config_data['acl_name']}: {match.group(0)}")
        else:
            self.failed(f"Inbound ACL {config_data['acl_name']} not found on interface {config_data['device2']['intf1']}. Configuration output: {inoutbound_verification_reply}")

        logger.info("Check if outbound ACL is configured on interface")
        inoutbound_verification_reply = NetconfCommonFunctions.show_running_config(uut2, config_data['device2']['intf2'])
        acl_output = str(inoutbound_verification_reply)
        match = re.search(inoutbound_acl_check, acl_output)
        if match:
            logging.info(f"Outbound ACL {config_data['acl_name']} is applied correctly on interface {config_data['device2']['intf2']}.")
            logging.info(f"Matched Line on {config_data['acl_name']}: {match.group(0)}")
        else:
            self.failed(f"Outbound ACL {config_data['acl_name']} not found on interface {config_data['device2']['intf2']}. Configuration output: {inoutbound_verification_reply}")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut2 = devices['dut2']
        logger.info("Unconfigure inbound ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut2, config_data['device2']['intf1'], config_data['acl_name'], config_data['bound'])

        logger.info("Unconfigure outbound ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut2, config_data['device2']['intf2'], config_data['acl_name'], config_data['bound1'])

        logger.info(f"Unconfigure ACL on device: {uut2.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut2, config_data['acl_name'])

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        for name, device in devices.items():
            device.nc.disconnect()
            assert not device.nc.connected, f"Device {name} disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))
