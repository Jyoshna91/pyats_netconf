from pyats.topology import loader
from pyats import aetest
import yaml
import re, logging
from lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Load data from config file
with open("config_data.yaml", "r") as file:
    config_data = yaml.safe_load(file)

acl_name = config_data['acl_name']
rule1 = config_data['rule1']
rule2 = config_data['rule2']
rule3 = config_data['rule3']
bound = config_data['bound']
bound1 = config_data['bound1']
device1_intf = config_data['device1']['intf']
device2_ip = config_data['device3']['ip_address']

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global devices
        devices = {
            'dut1': testbed.devices['n9k1'],
            'dut2': testbed.devices['n9k2'],
            'dut3': testbed.devices['n9k3']
        }
        for name, device in devices.items():
            device.connect(alias='nc', via='netconf')
            assert device.nc.connected, f"Device {name} connection failed"

class PermitACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut1 = devices['dut1']
        logger.info(f"Configure permit ACL on device1: {uut1.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut1, acl_name, rule1)

        logger.info("Configure permit ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut1, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_and_ping(self):
        uut1 = devices['dut1']
        logger.info("Check if permit ACL is configured")
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        verification_reply = uut1.nc.request(verification_request)
        acl_output = str(verification_reply)
        if acl_name in acl_output:
            logger.info("Permit ACL configured on device")
        else:
            self.errored('Permit ACL is not configured on device')

        logger.info(f"Ping the IP configured on device3: {devices['dut3'].name}")
        result = NetconfCommonFunctions.ping_device(uut1, device2_ip)
        logger.info(f"Ping result: {result}")

        res_dict = NetconfCommonFunctions.validate_ping(result)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        try:
            sent_pkt = int(res_dict.get('sent_pkt', 0))
            receive_pkt = int(res_dict.get('receive_pkt', 0))
            pkt_loss = res_dict.get('pkt_loss', "0%")

            if sent_pkt == receive_pkt and pkt_loss == "0%":
                logger.info(f"Ping successful with no packet loss on device {uut1.name}")
                self.passed(f"Ping successful with no packet loss on device {uut1.name}")
            else:
                logger.info(f"Ping failed with packet loss on device {uut1.name}")
                self.failed(f"Ping failed with packet loss on device {uut1.name}: {pkt_loss}")
        except KeyError as e:
            self.failed(f"KeyError: {e} - Ping result did not contain expected keys")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut1 = devices['dut1']
        logger.info("Unconfigure permit ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut1, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure permit ACL on device: {uut1.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut1, acl_name)

class DenyACLTestcase(aetest.Testcase):

    @aetest.setup
    def setup(self):
        uut2 = devices['dut2']
        logger.info(f"Configure deny ACL on device2: {uut2.name}")
        NetconfCommonFunctions.configure_acl_on_device(uut2, acl_name, rule2)

        logger.info("Configure deny ACL on interface")
        NetconfCommonFunctions.configure_acl_on_interface(uut2, device1_intf, acl_name, bound)

    @aetest.test
    def verify_acl_and_ping(self):
        uut2 = devices['dut2']
        logger.info("Check if deny ACL is configured")
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="112" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        verification_reply = uut2.nc.request(verification_request)
        acl_output = str(verification_reply)
        if acl_name in acl_output:
            logger.info("Deny ACL configured on device")
        else:
            self.errored('Deny ACL is not configured on device')

        logger.info(f"Ping the IP configured on device3: {devices['dut3'].name}")
        result = NetconfCommonFunctions.ping_device(uut2, device2_ip)
        logger.info(f"Ping result: {result}")

        res_dict = NetconfCommonFunctions.validate_ping(result)
        logger.info("++++++++++++++++++++++++++++")
        logger.info(res_dict)
        logger.info("++++++++++++++++++++++++++++")

        try:
            sent_pkt = int(res_dict.get('sent_pkt', 0))
            receive_pkt = int(res_dict.get('receive_pkt', 0))
            pkt_loss = res_dict.get('pkt_loss', "0%")

            if sent_pkt != receive_pkt and pkt_loss == "100%":
                logger.info(f"Ping failed with packet loss on device {uut2.name}")
                self.passed(f"Success: After applying deny rule for ACL, ping failed")
            else:
                logger.info(f"Ping succeeded unexpectedly on device {uut2.name}")
                self.failed(f"Failed: After applying deny rule for ACL, ping succeeded")
        except KeyError as e:
            self.failed(f"KeyError: {e} - Ping result did not contain expected keys")

    @aetest.cleanup
    def unconfigure_acl_on_device(self):
        uut2 = devices['dut2']
        logger.info("Unconfigure deny ACL on interface")
        NetconfCommonFunctions.unconfigure_acl_on_interface(uut2, device1_intf, acl_name, bound)

        logger.info(f"Unconfigure deny ACL on device: {uut2.name}")
        NetconfCommonFunctions.unconfigure_acl_on_device(uut2, acl_name)

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        for name, device in devices.items():
            device.nc.disconnect()
            assert not device.nc.connected, f"Device {name} disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))
