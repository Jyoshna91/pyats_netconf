from pyats.topology import loader
from pyats import aetest
import re, logging
from lib import NetconfCommonFunctions

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class CommonSetup(aetest.CommonSetup):
    @aetest.subsection
    def connect_to_devices(self, testbed):
        global device
        device = testbed.devices['n9k1']
        device.connect(alias='nc', via='netconf')
        assert device.nc.connected, "Device connection failed"

class ConfigureVerifyAndUnconfigureACL(aetest.Testcase):
    acl_name = 'aclnqt'
    destination_ip = "192.168.10.1"

    @aetest.test
    def configure_acl(self):
        try:
            # Configure ACL on the device
            reply_command_device = NetconfCommonFunctions.configure_acl_on_device(device)
            logging.info("Configuration on Device Reply: %s", reply_command_device)
            
            # Configure ACL on the interface
            reply_command_interface = NetconfCommonFunctions.configure_acl_on_interface(device)
            logging.info("Configuration on Interface Reply: %s", reply_command_interface)
        except Exception as e:
            self.failed(f"Failed to send configuration command: {e}")

    @aetest.test
    def verify_acl_and_ping(self):
        verification_request = f"""
        <?xml version="1.0" encoding="UTF-8"?>
        <nf:rpc message-id="111" xmlns:nf="urn:ietf:params:xml:ns:netconf:base:1.0" xmlns:nxos="http://www.cisco.com/nxos:1.0">
            <nxos:exec-command>
                <nxos:cmd>show ip access-lists {self.acl_name}</nxos:cmd>
            </nxos:exec-command>
        </nf:rpc>
        """
        try:
            verification_reply = device.nc.request(verification_request)
            acl_output = str(verification_reply)
            rule = r'<(mod:seqno)>[1-9][0-9]</\1>'
            match = re.search(rule, acl_output)
            if match:
                logging.info("The ACL rule is verified successfully on device.")
                logging.info("Matched Line: %s", match.group(0))
            else:
                self.failed(f"ACL rule matching '{rule}' not found in the device configuration")
            
            # Ping the destination IP
            ping_reply = NetconfCommonFunctions.ping_device(device, self.destination_ip)
            logging.info("Ping Reply: %s", ping_reply)

            # Validate ping results
            ping_result = NetconfCommonFunctions.validate_ping(ping_reply)
            sent_pkt = int(ping_result.get('sent_pkt', 0))
            receive_pkt = int(ping_result.get('receive_pkt', 0))
            pkt_loss = ping_result.get('pkt_loss', "0%")

            if sent_pkt == receive_pkt and pkt_loss == "0%":
                self.passed("Ping successful with no packet loss")
            else:
                self.failed("Ping failed with packet loss: {}".format(pkt_loss))
        except Exception as e:
            self.failed(f"Failed to send verification command: {e}")

    @aetest.test
    def unconfigure_acl(self):
        try:
            # Unconfigure ACL on the device
            reply_command_device = NetconfCommonFunctions.unconfigure_acl_on_device(device)
            logging.info("Unconfiguration on Device Reply: %s", reply_command_device)
            
            # Unconfigure ACL on the interface
            reply_command_interface = NetconfCommonFunctions.unconfigure_acl_on_interface(device)
            logging.info("Unconfiguration on Interface Reply: %s", reply_command_interface)
        except Exception as e:
            self.failed(f"Failed to send unconfiguration command: {e}")

class CommonCleanup(aetest.CommonCleanup):
    @aetest.subsection
    def disconnect(self):
        device.nc.disconnect()
        assert not device.nc.connected, "Device disconnection failed"

if __name__ == '__main__':
    import argparse
    from pyats import aetest
    from genie.testbed import load

    parser = argparse.ArgumentParser()
    parser.add_argument('--testbed', dest='testbed', type=loader.load)
    args, unknown = parser.parse_known_args()

    aetest.main(**vars(args))
